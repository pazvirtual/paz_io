#ifndef PAZ_IO
#define PAZ_IO

#include <iostream>
#include <vector>
#include <unordered_map>
#include <array>

namespace paz
{
    std::array<std::string, 3> split_path(const std::string& path);

    void write_bmp(const std::string& path, unsigned int width, const std::
        vector<float>& rgb);

    // Positions and normals are padded for graphics compatibility ([vx, vy, vz,
    // 1] and [nx, ny, nz, 0]) and materials are one-indexed (0: unassigned, 1:
    // `materialNames[0]`, etc.).
    void load_obj(const std::string& path, std::vector<std::string>& names,
        std::vector<std::vector<float>>& positions, std::vector<std::vector<
        float>>& uvs, std::vector<std::vector<float>>& normals, std::vector<
        std::vector<unsigned int>>& materials, std::vector<std::string>&
        materialNames, std::vector<std::string>& materialLibs);
    void load_obj(const std::string& path, std::vector<std::string>& names,
        std::vector<std::vector<float>>& positions, std::vector<std::vector<
        float>>& uvs, std::vector<std::vector<float>>& normals, std::vector<
        std::vector<unsigned int>>& materials, std::vector<std::string>&
        materialNames, std::vector<std::string>& materialLibs, std::vector<std::
        vector<unsigned int>>& indices);

    std::vector<unsigned char> compress(const std::string& str);
    std::string uncompress(const std::vector<unsigned char>& src);
    void write_archive(const std::string& path, const std::unordered_map<std::
        string, std::vector<unsigned char>>& blocks);
    std::unordered_map<std::string, std::size_t> load_contents_list(const std::
        string& path);
    std::string load_block(const std::string& path, const std::string& name);
}

#endif
