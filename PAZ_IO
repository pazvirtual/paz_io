#ifndef PAZ_IO
#define PAZ_IO

#include <iostream>
#include <vector>
#include <unordered_map>
#include <array>

namespace paz
{
    class Bytes : public std::vector<unsigned char>
    {
        using std::vector<unsigned char>::vector;

    public:
        Bytes(const char* str);
        Bytes(const std::string& str);
        std::string str() const;
    };

    class Archive
    {
        std::unordered_map<std::string, Bytes> _blocks;

    public:
        Archive();
        Archive(const std::string& path);
        void add(const std::string& name, const Bytes& data);
        Bytes get(const std::string& name) const;
        void load(const std::string& path);
        void write(const std::string& path) const;
        void clear();
    };

    std::array<std::string, 3> split_path(const std::string& path);

    void write_bmp(const std::string& path, unsigned int width, const std::
        vector<float>& rgb);

    // Positions and normals are padded for graphics compatibility ([vx, vy, vz,
    // 1] and [nx, ny, nz, 0]) and materials are one-indexed (0: unassigned, 1:
    // `materialNames[0]`, etc.).
    void load_obj(const std::string& path, std::vector<std::string>& names,
        std::vector<std::vector<float>>& positions, std::vector<std::vector<
        float>>& uvs, std::vector<std::vector<float>>& normals, std::vector<
        std::vector<unsigned int>>& materials, std::vector<std::string>&
        materialNames, std::vector<std::string>& materialLibs);
    void load_obj(const std::string& path, std::vector<std::string>& names,
        std::vector<std::vector<float>>& positions, std::vector<std::vector<
        float>>& uvs, std::vector<std::vector<float>>& normals, std::vector<
        std::vector<unsigned int>>& materials, std::vector<std::string>&
        materialNames, std::vector<std::string>& materialLibs, std::vector<std::
        vector<unsigned int>>& indices);

    Bytes compress(const Bytes& src);
    Bytes uncompress(const Bytes& src);

    std::string load_text(const std::string& path);

    void remove(const std::string& path);
}

#endif
